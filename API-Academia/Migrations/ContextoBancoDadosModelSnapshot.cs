// <auto-generated />
using System;
using API_Academia.BancoDados;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Academia.Migrations
{
    [DbContext(typeof(ContextoBancoDados))]
    partial class ContextoBancoDadosModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API_Academia.BancoDados.Entidades.AvaliacaoFisicaEntidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Altura")
                        .HasColumnType("float");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAluno")
                        .HasColumnType("int");

                    b.Property<int>("IdTreinador")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<double>("PercentualGordura")
                        .HasColumnType("float");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdAluno");

                    b.HasIndex("IdTreinador");

                    b.ToTable("AvaliacaoFisica");
                });

            modelBuilder.Entity("API_Academia.BancoDados.Entidades.CargoEntidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeCargo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Cargo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NomeCargo = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            NomeCargo = "Treinador"
                        },
                        new
                        {
                            Id = 3,
                            NomeCargo = "Aluno"
                        });
                });

            modelBuilder.Entity("API_Academia.BancoDados.Entidades.PresencaEntidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdTreino")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTreino");

                    b.ToTable("Presenca");
                });

            modelBuilder.Entity("API_Academia.BancoDados.Entidades.TreinoEntidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdAluno")
                        .HasColumnType("int");

                    b.Property<int>("IdTreinador")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAluno");

                    b.HasIndex("IdTreinador");

                    b.ToTable("Treino");
                });

            modelBuilder.Entity("API_Academia.BancoDados.Entidades.UsuarioEntidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCargo")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCargo");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataCadastro = new DateTime(2025, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCargo = 1,
                            Nome = "Admin",
                            Senha = "6K6CkoWLhOj6rYBKmbrz2nFoiULnRq5pNJlfkK4eq8YbB90n"
                        });
                });

            modelBuilder.Entity("API_Academia.BancoDados.Entidades.AvaliacaoFisicaEntidade", b =>
                {
                    b.HasOne("API_Academia.BancoDados.Entidades.UsuarioEntidade", "Aluno")
                        .WithMany()
                        .HasForeignKey("IdAluno")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_Academia.BancoDados.Entidades.UsuarioEntidade", "Treinador")
                        .WithMany()
                        .HasForeignKey("IdTreinador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("API_Academia.BancoDados.Entidades.PresencaEntidade", b =>
                {
                    b.HasOne("API_Academia.BancoDados.Entidades.UsuarioEntidade", "Treino")
                        .WithMany()
                        .HasForeignKey("IdTreino")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Treino");
                });

            modelBuilder.Entity("API_Academia.BancoDados.Entidades.TreinoEntidade", b =>
                {
                    b.HasOne("API_Academia.BancoDados.Entidades.UsuarioEntidade", "Aluno")
                        .WithMany()
                        .HasForeignKey("IdAluno")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_Academia.BancoDados.Entidades.UsuarioEntidade", "Treinador")
                        .WithMany()
                        .HasForeignKey("IdTreinador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("API_Academia.BancoDados.Entidades.UsuarioEntidade", b =>
                {
                    b.HasOne("API_Academia.BancoDados.Entidades.CargoEntidade", "Cargo")
                        .WithMany()
                        .HasForeignKey("IdCargo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cargo");
                });
#pragma warning restore 612, 618
        }
    }
}
